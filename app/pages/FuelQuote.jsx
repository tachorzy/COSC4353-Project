import Head from 'next/head'
import Image from 'next/image'
import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import FuelQuoteForm from '../components/FuelQuoteForm.jsx'
import { Inter } from '@next/font/google'
import { Combo, Roboto, Rubik } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import localFont from '@next/font/local'
import { TypeAnimation } from 'react-type-animation';
import Client from '../__models/client.js'
import { useSession } from 'next-auth/react'

const inter = Inter({ subsets: ['latin'] })

const roboto = Roboto({ 
  subsets: ['latin'], 
  weight: '400' 
})

const satoshi = localFont({
  src: '../fonts/Satoshi-Regular.otf',
  weight: '200'
})

export default function FuelQuote() {
  const {data} = useSession();
  const [selectDate, setSelectedDate] = useState('')
  const [selectGallons, setSelectedGallons] = useState('')
  //Could make a hook out of this but posisbly not, I'll have to look into it and decide whether or not what I'm thinking is sensible - Tariq
  const [suggestedPPG, setSuggestedPPG] = useState('$0.00')

  let locationFactor = 0.04
  let rateHistory = 0
  let requestFactor = .03
  let CPF = .1
  let totPrice = 0 //making sure it's initalized to 0.
  // Some checks to change the first 3 variables go below here
  if(selectGallons > 1000){
    requestFactor = .02
    console.log(data.user.personalDetails[0].state)
  }
  const [userHistory, setUserHistory] = useState('')
  useEffect(() => {
    fetch('http://localhost:3000/api/getUserHistory')
        .then((response) => response.json())
        .then((data) => {
        setUserHistory(data);
        console.log(data.quoteHistory)
        console.log(data)
        console.log(data.user.email)
        });
    }, []);
  if( userHistory != "" ){
    rateHistory = 0.5
  }
  if(data.user.personalDetails[0].state == "TX" || data.user.personalDetails[0].state == "Texas")
    locationFactor = .02
  // Actual calculation
  //Move this to a function that can get called when we click the button - Tariq
  var gallonsRequested
  const PPG = 1.5
  let fuelMultiplier = locationFactor - rateHistory + requestFactor + CPF
  let suggestedPrice = PPG + fuelMultiplier
  totPrice = suggestedPrice * gallonsRequested


  const router = useRouter();

  const handleFormSubmit = async (event) => {
    event.preventDefault();

    if (selectDate === "mm/dd/yyy" || selectGallons === "")
      return;

    try{
      router.push({
        pathname: '/api/calculate', //rename this to whatever actual api endpoint we'll end up having
        query: { date: selectDate, numOfGallons: selectGallons }, 
      })
    } catch(error){
      console.error(error)
      }
  };

  return (
    <>
      <Head>
        <title>Fill Your Fuel Quote Form</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <main className={styles.main}>
        <div className={satoshi.className}>
              <h2 className='text-stone-100 text-3xl font-semibold mb-2 ml-3'>
                {"Make a Fuel Quote:"}
              </h2>            
            <form 
              className= "bg-stone-100 bg-opacity-20 grid grid-cols-2 grid-rows-2 gap-y-1 rounded-3xl m-auto pb-11 pt-10 px-5 text-sm w-[30rem]" 
              onSubmit={handleFormSubmit}
            >
              <div className="col-span-2 h-28">
                <h2 className="text-stone-100 font-semibold col-span-1 text-lg text-left mx-5">
                    <TypeAnimation
                        className=""
                        sequence={[
                          `The current rate is: $${PPG} per gallon.`,
                          3200,
                        ]} 
                        cursor={true}
                        repeat={false}
                        speed={25}
                        deletionSpeed={25}
                      />                
                  </h2>
                  <h2 className="text-stone-100 font-light col-span-1 text-sm text-left mx-5 w-full">
                    <TypeAnimation
                        className=""
                        sequence={[
                          `Location factor policy:\nClients from Texas\n are charged a 2% location factor.\nWhile out of state clients will be charged 4%.`,
                          3200,
                        ]} 
                        cursor={true}
                        repeat={false}
                        speed={25}
                        deletionSpeed={25}
                      />                
                  </h2>
              </div>
              <div>
                <h3 className="text-white font-base font-semibold mx-5 pl-1 pb-1.5">Delivery Date</h3>
                <input type="date" className="h-12 mx-5 w-10/12 p-2 py-2 border-transparent rounded-xl font-medium text-stone-400" placeholder={"Delivery Date"} name="delivery-date" onChange={(event) => setSelectedDate(event.target.value)}/>
              </div> 

              <div className="w-full">
                <h3 className="text-white font-base font-semibold mx-5 pl-1 pb-1.5">Amount of gallons</h3>
                <Image src='/gallon.svg' width={18} height={18} className="absolute ml-40 mt-3.5" alt="gallon"></Image>
                <input className="h-12 mx-5 w-10/12 p-2 py-2 border-transparent rounded-xl font-medium text-stone-400" placeholder={"Gallons"} name="gallons-requested" onChange={(event) => setSelectedGallons(event.target.value)}/>
              </div>

              <div className="w-full col-span-1">
                <h2 className="text-white font-medium text-sm mx-5 pl-1 pb-1.5">Suggested Price per Gallon</h2>
                <div className="h-12 mx-5 w-10/12 p-2 py-2 border-transparent rounded-xl font-medium bg-stone-100 text-cambridgeBlue text-right">
                  <p className="text-neutral-500 py-1.5 pr-3">${suggestedPrice.toFixed(2)}</p>
                </div>
              </div>

              <div className="w-full col-span-1">
                <h2 className="text-white font-medium text-sm mx-5 pl-1 pb-1.5">Estimated Total Price:</h2>
                <div className="h-12 mx-5 w-10/12 p-2 py-2 rounded-xl font-medium bg-stone-100 text-cambridgeBlue text-right mb-2">
                  <p className="text-neutral-500 py-1.5 pr-3">${totPrice.toFixed(2)}</p>
                </div>
              </div>

              <div className= "col-span-2 mx-5 border-t-2 border-white border-inherit border-spacing-6 pt-2 mt-2 ">
                <buttton 
                  className="bg-stone-300 text-stone-500 text-center col-span-1 font-semibold h-12 mt-2 w-full p-2 py-3 border-transparent rounded-xl hover:bg-stone-400 hover:text-stone-600 hover:cursor-pointer flex flex-row items-center justify-center"
                >
                  Get Quote!
                </buttton>  
                
                <buttton 
                  className="bg-stone-300 text-stone-500 text-center col-span-1 font-semibold h-12 mt-2 w-full p-2 py-3 border-transparent rounded-xl hover:bg-stone-400 hover:text-stone-600 hover:cursor-pointer flex flex-row items-center justify-center gap-x-1"
                >
                  {"Submit"}
                  <Image src="/link.svg" width={18} height={18} alt=""></Image>
                </buttton> 
              </div>
             
            </form>
          </div>
      </main>
    </>
  )
}